[{"id":"54c1fa9b.915f74","type":"function","z":"4e2f68b6.dfdf68","name":"function1","func":"// 受信ボディをJSONに統一\nlet raw = msg.payload;\nif (Buffer.isBuffer(raw)) raw = raw.toString('utf8');\nif (typeof raw === 'string') {\n    try { raw = JSON.parse(raw || '{}'); }\n    catch (e) { node.warn('JSON parse error'); return null; }\n}\n\nconst ev = raw?.events?.[0];\nif (!ev?.replyToken) return null; // 検証などは無視\n\nconst text = (ev.type === 'message' && ev.message?.type === 'text')\n    ? ev.message.text\n    : '（テキストを送ってください）';\n\n// ★ 環境変数は env.get で取得\nconst token = env.get('LINE_CHANNEL_ACCESS_TOKEN');\nif (!token) { node.error('LINE token not set'); return null; }\n\n// HTTP request 用セット（Reply APIを使う）\nmsg.url = 'https://api.line.me/v2/bot/message/reply';\nmsg.headers = {\n    'Authorization': 'Bearer ' + token,\n    'Content-Type': 'application/json'\n};\nmsg.payload = {\n    replyToken: ev.replyToken,\n    messages: [{ type: 'text', text }]\n};\n\n// 後段に不要な巨大オブジェクトは削除（任意）\ndelete msg.req; delete msg.res;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":100,"wires":[["2aa9564.851d9aa"]]}]
