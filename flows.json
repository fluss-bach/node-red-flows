[{"id":"4e2f68b6.dfdf68","type":"tab","label":"フロー 6","disabled":false,"info":""},{"id":"d5519557.810e48","type":"http in","z":"4e2f68b6.dfdf68","name":"Webhook","url":"/webhook","method":"post","upload":false,"swaggerDoc":"","x":80,"y":100,"wires":[["60d085bd.3f0e0c","54c1fa9b.915f74"]]},{"id":"60d085bd.3f0e0c","type":"http response","z":"4e2f68b6.dfdf68","name":"Return 200","statusCode":"200","headers":{},"x":270,"y":160,"wires":[]},{"id":"54c1fa9b.915f74","type":"function","z":"4e2f68b6.dfdf68","name":"function1","func":"// 受信ボディをJSONに統一\nlet raw = msg.payload;\nif (Buffer.isBuffer(raw)) raw = raw.toString('utf8');\nif (typeof raw === 'string') {\n    try { raw = JSON.parse(raw || '{}'); } catch (e) { node.warn('JSON parse error'); return null; }\n}\nconst ev = raw?.events?.[0];\nif (!ev?.replyToken) return null; // 検証などは無視\n\nconst text = (ev.type === 'message' && ev.message?.type === 'text')\n    ? ev.message.text\n    : '（テキストを送ってください）';\n\n// http request へ渡すのはヘッダとボディだけ\nmsg.headers = {\n    \"Authorization\": \"Bearer \" + process.env.LINE_CHANNEL_ACCESS_TOKEN,\n    \"Content-Type\": \"application/json\"\n};\nmsg.payload = {\n    replyToken: ev.replyToken,\n    messages: [{ type: 'text', text }]\n};\n\n// 余計な参照は削除\ndelete msg.req;\ndelete msg.res;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":100,"wires":[["2aa9564.851d9aa"]]},{"id":"2aa9564.851d9aa","type":"http request","z":"4e2f68b6.dfdf68","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"https://api.line.me/v2/bot/message/reply","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":470,"y":100,"wires":[["7d4ab25a.84473c"]]},{"id":"7d4ab25a.84473c","type":"debug","z":"4e2f68b6.dfdf68","name":"debug1","active":true,"tosidebar":true,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"payload","statusType":"auto","x":670,"y":100,"wires":[]}]
